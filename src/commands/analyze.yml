description: Analyze code statically using misspell
parameters:
  patterns-to-include:
    description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: ".*"
  patterns-to-exclude:
    description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: '^\./\.git/.*'
  starting-points:
    description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
    type: string
    default: "."
  ignore:
    description: ignore the following corrections, comma separated
    type: string
    default: ""
  locale:
    description: Correct spellings using locale perferances for US or UK.  Default is to use a neutral variety of English.  Setting locale to US will correct the British spelling of 'colour' to 'color'
    type: enum
    enum: ["US", "UK"]
    default: "US"
  no-analysis-output-timeout:
    description: Elapsed time the command can run without output. The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
    type: string
    default: 10m
  prepare:
    description: Specify the required steps before analysis if necessary
    type: steps
    default:
      - install-analyzer
  redirecting-output:
    description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
    type: enum
    enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
    default: "/dev/null"
  max-procs:
    description: Specify the maximum number of processes to run at the same time
    type: integer
    default: 1
steps:
  - dscar/analyze:
      step-name: Analyze code statically using misspell
      prepare:
        - run:
            name: export ANALYSIS_ARGUMENTS
            environment:
              ARG_LOCALE: << parameters.locale >>
              ARG_IGNORE: << parameters.ignore >>
            command: |
              set -x
              cat \<<-EOT >> $BASH_ENV
              export ANALYSIS_ARGUMENTS=(
                -locale "$ARG_LOCALE"
                -i "$ARG_IGNORE"
                -f '<file name="{{ .Filename | html }}"><error source="misspelling" line="{{ .Line | html }}" column="{{ .Column | html }}" message="{{ printf "%q" .Original | html }} is a misspelling of {{ printf "%q" .Corrected | html }}" /></file>'
              )
              EOT
        - steps: << parameters.prepare >>
      analysis-command: misspell
      header-command: echo
      header-arguments: <checkstyle>
      footer-command: echo
      footer-arguments: </checkstyle>
      should-find: "true"
      patterns-to-include: << parameters.patterns-to-include >>
      patterns-to-exclude: << parameters.patterns-to-exclude >>
      starting-points: << parameters.starting-points >>
      no-output-timeout: << parameters.no-analysis-output-timeout >>
      redirecting-output: << parameters.redirecting-output >>
      max-procs: << parameters.max-procs >>
