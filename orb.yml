version: 2.1

description: Delta misspell reports

orbs:
  dscar: naokikimura/dscar@0.5.4

executors:
  default:
    description: Default misspell execution environment
    parameters:
      docker-image:
        description: Specify the image used to execute misspell
        type: string
        default: circleci/golang:latest-node
      resource_class:
        description: Amount of CPU and RAM allocated to each container in a job.
        type: string
        default: small
    docker:
      - image: << parameters.docker-image >>
    resource_class: << parameters.resource_class >>

commands:
  analyze:
    description: Analyze code statically using misspell
    parameters:
      patterns-to-include:
        description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ".*"
      patterns-to-exclude:
        description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ""
      starting-points:
        description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
        type: string
        default: "."
      ignore:
        description: ignore the following corrections, comma separated
        type: string
        default: ""
      locale:
        description: Correct spellings using locale perferances for US or UK.  Default is to use a neutral variety of English.  Setting locale to US will correct the British spelling of 'colour' to 'color'
        type: enum
        enum: ["US", "UK"]
        default: "US"
      no-analysis-output-timeout:
        description: Elapsed time the command can run without output. The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
        type: string
        default: 10m
      prepare:
        description: Specify the required steps before analysis if necessary
        type: steps
        default:
          - run: go get -u github.com/client9/misspell/cmd/misspell
      redirecting-output:
        description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
        type: enum
        enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
        default: "/dev/null"
    steps:
      - dscar/analyze:
          step-name: Analyze code statically using misspell
          prepare:
            - run:
                name: export ANALYSIS_ARGUMENTS
                environment:
                  ARG_LOCALE: << parameters.locale >>
                  ARG_IGNORE: << parameters.ignore >>
                command: |
                  set -x
                  cat \<<-EOT >> $BASH_ENV
                  export ANALYSIS_ARGUMENTS=(
                    -locale "$ARG_LOCALE"
                    -i "$ARG_IGNORE"
                    -f '<testsuite id="0" package="misspell" name="{{ .Filename | html }}" timestamp="`date '+%Y-%m-%dT%H:%M:%S'`" hostname="`hostname`" tests="1" failures="1" errors="0" time="0"><properties /><system-out /><system-err /><testcase name="Replace" classname="Replacer" time="0"><failure type="misspelling">{{ .Filename | html }}:{{ .Line | html }}:{{ .Column | html }}: {{ printf "%q" .Original | html }} is a misspelling of {{ printf "%q" .Corrected | html }}</failure></testcase></testsuite>'
                  )
                  EOT
            - steps: << parameters.prepare >>
          analysis-command: misspell
          header-command: echo
          header-arguments: <testsuites>
          footer-command: echo
          footer-arguments: </testsuites>
          should-find: "true"
          patterns-to-include: << parameters.patterns-to-include >>
          patterns-to-exclude: << parameters.patterns-to-exclude >>
          starting-points: << parameters.starting-points >>
          no-output-timeout: << parameters.no-analysis-output-timeout >>
          redirecting-output: << parameters.redirecting-output >>
  calculate:
    description: |
      Calculate the difference between the analysis results

      Use the [junit-reports-combiner][1] command to calculate the difference

      [1]: https://www.npmjs.com/package/junit-reports-combiner
    parameters:
      first-result-path:
        description: Path of the file to use as the minuend
        type: string
        default: "HEAD-analysis-results.xml"
      second-result-path:
        description: Path of the file to use as the subtrahend
        type: string
        default: "BASE-analysis-results.xml"
      delta-result-path:
        description: Path to save difference of analysis results
        type: string
        default: "/dev/null"
      should-install-node_js:
        description: Specify true if the execution environment does not have Node.js installed
        type: boolean
        default: false
    steps:
      - dscar/calculate:
          options: --test-case-key=concat(@classname,"#",@name,"=>",normalize-space())
          first-result-path: << parameters.first-result-path >>
          second-result-path: << parameters.second-result-path >>
          delta-result-path: << parameters.delta-result-path >>
          should-install-node_js: << parameters.should-install-node_js >>
  execute:
    description: Calculate the difference of misspell results between HEAD branch and BASE branch
    parameters:
      has-reconstructed:
        description: Specify true if `compare-url/reconstruct` has not been executed yet
        type: boolean
        default: false
      attach-compare-url-workspace:
        description: "Attach a workspace for this command to use? Useful when `compare-url` orb's `reconstruct` job is called upstream in a given workflow"
        type: boolean
        default: false
      analyze:
        description: Specify analysis steps
        type: steps
        default:
          - analyze:
              prepare: []
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
      calculate:
        description: Specify the steps for calculating the difference
        type: steps
        default:
          - calculate
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      project-path:
        description: "Absolute path to your project's base directory, necessary for running git commands (default: job’s working_directory)"
        type: string
        default: ""
    steps:
      - run: go get -u github.com/client9/misspell/cmd/misspell
      - dscar/execute:
          has-reconstructed: << parameters.has-reconstructed >>
          attach-compare-url-workspace: << parameters.attach-compare-url-workspace >>
          analysis-name: misspell
          analyze: << parameters.analyze >>
          analysis-results-path: << parameters.analysis-results-path >>
          calculate: << parameters.calculate >>
          test-results-path: << parameters.test-results-path >>
          project-path: << parameters.project-path >>

jobs:
  analyze:
    description: Analyze code statically using misspell
    parameters:
      executor:
        description: Specify the image used to execute analysis
        type: executor
        default: default
      is-target-branch-base:
        description: Check-out the BASE branch if true is specified
        type: boolean
        default: false
      has-reconstructed:
        description: Specify true if `compare-url/reconstruct` has not been executed yet
        type: boolean
        default: false
      attach-compare-url-workspace:
        description: "Attach a workspace for this command to use? Useful when `compare-url` orb's `reconstruct` job is called upstream in a given workflow"
        type: boolean
        default: false
      analyze:
        description: Specify analysis steps
        type: steps
        default:
          - analyze
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
    executor: << parameters.executor >>
    steps:
      - dscar/set-analysis-result-path:
          analysis-name: misspell
          analysis-results-path: << parameters.analysis-results-path >>
          is-target-branch-base: << parameters.is-target-branch-base >>
      - dscar/checkout-analysis-target:
          is-target-branch-base: << parameters.is-target-branch-base >>
          has-reconstructed: << parameters.has-reconstructed >>
          attach-compare-url-workspace: << parameters.attach-compare-url-workspace >>
      - steps: << parameters.analyze >>
      - store_test_results:
          path: << parameters.analysis-results-path >>
  calculate:
    description: |
      Calculate the difference between the analysis results

      Use the [junit-reports-combiner][1] command to calculate the difference

      [1]: https://www.npmjs.com/package/junit-reports-combiner
    parameters:
      executor:
        description: Specify the image used to execute analysis
        type: executor
        default: default
      calculate:
        description: Specify the steps for calculating the difference
        type: steps
        default:
          - calculate
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
    executor: << parameters.executor >>
    steps:
      - dscar/set-result-paths:
          analysis-name: misspell
          analysis-results-path: << parameters.analysis-results-path >>
          test-results-path: << parameters.test-results-path >>
      - steps: << parameters.calculate >>
      - store_test_results:
          path: << parameters.test-results-path >>
  execute:
    description: Calculate the difference of misspell results between HEAD branch and BASE branch
    parameters:
      executor:
        description: Specify the image used to execute analysis
        type: executor
        default: default
      has-reconstructed:
        description: Specify true if `compare-url/reconstruct` has not been executed yet
        type: boolean
        default: false
      attach-compare-url-workspace:
        description: "Attach a workspace for this command to use? Useful when `compare-url` orb's `reconstruct` job is called upstream in a given workflow"
        type: boolean
        default: false
      analyze:
        description: Specify analysis steps
        type: steps
        default:
          - analyze:
              prepare: []
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
      calculate:
        description: Specify the steps for calculating the difference
        type: steps
        default:
          - calculate
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      should-save-analysis-results-as-artifacts:
        description: Specify true if analysis results should be saved as artifacts
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - execute:
          has-reconstructed: << parameters.has-reconstructed >>
          attach-compare-url-workspace: << parameters.attach-compare-url-workspace >>
          analyze: << parameters.analyze >>
          analysis-results-path: << parameters.analysis-results-path >>
          calculate: << parameters.calculate >>
          test-results-path: << parameters.test-results-path >>
      - store_test_results:
          path: << parameters.test-results-path >>
      - when:
          condition: << parameters.should-save-analysis-results-as-artifacts >>
          steps:
            - store_artifacts:
                path: << parameters.analysis-results-path >>
